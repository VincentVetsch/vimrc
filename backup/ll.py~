#!/usr/bin/env python
# TODO -- have switch for hidden files
# TODO -- add color variables
from subprocess import Popen

filterVar = []


def filter():
    ''' Adds filter line items to the find command.
        Arguments:
            fname:   The string to be used a a filter
            ftype:   The type of filter
        Return:      A properly formated string to be used as a filter
        '''
    # TODO -- Add Code
    pass


def fileCount():
    ''' Count the files in the search directory
        Arguments:
            path:       The path of the directory
        Returns:        The formated string of file count
        '''
    # TODO -- Add code
    pass


def make_metric(value):
    ''' Converts a integer into a string of a metric bytes.
        1024 = 1K
        10240000 = 1M
        10240000000 = 1G
        Arguments:
            - value:        Needs to be an integer value
        Returns:            A string that represents a integer value in metric
                            bytes.
        '''
    # TODO -- Adapt code with coloring
    data = int(value)
    kbytes = 1024
    mbytes = kbytes * 1024
    gbytes = mbytes * 1024
    tbytes = gbytes * 1024
    if data < kbytes:
        return '{0} Btyes'.format(data)
    elif data >= kbytes and data < mbytes:
        return '{0} KBtyes'.format(round(data / kbytes))
    elif data >= mbytes and data < gbytes:
        return '{0} MBtyes'.format(round(data / mbytes))
    elif data >= gbytes and data < tbytes:
        return '{0} GBtyes'.format(round(data / gbytes))
    elif data >= tbytes:
        return '{0:.2f} TBtyes'.format(round(data / tbytes))
    else:
        raise ValueError, "Value is out of range." + value


def make_locale(value):
    ''' Converts a integer into a string of with locale commafy
        10024 = 10,024
        10240000 = 10,240,000
        10240000000 = 10,240,000,000
        ...

        Arguments:
        - value:        Needs to be an integer value

        Returns:        A string that represents a integer value in locale
        '''
    # TODO -- Adapt code with coloring
    import locale
    data = int(value)
    locale.setlocale(locale.LC_ALL, '')
    return locale.format("%d", data, grouping=True)


def fileType(ftype, fname):
    ''' Determine the file type and apply the proper coloring
        Arguments:
            ftype:      Single letter code for file type
            fname:      The file name
        Return:         A string will fname color coded
        '''
    # TODO -- Add Code
    pass


def sizeOfFile(fsize):
    ''' Determine the file size and apply the proper coloing
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- Add Code
    pass


def userAndGroup(user, group):
    ''' Apply the proper coloring to the user and group field
        Arguments:
            user:       The user name
            group:      The group name
        Return:         A string with user name and group name
                        color coded
        '''

    # TODO -- Add Code
    pass


def operm():
    ''' Apply the proper coloring to the octal permissions field
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- Finish commenting
    pass


def perm():
    ''' Apply the proper coloring to the permissions field
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- Finish commenting
    pass


def ctime():
    ''' Apply the proper coloring to the time field
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- Finish commenting
    pass


def sort():
    ''' Apply sort to the output
        Arguments:

        Return:         Sorted output
        '''
        # TODO -- Add code and complete commenting
    pass


def duCommand():
    ''' Determine the file size and apply the proper coloring
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- add du function for directory total size 'du -sh'
    # TODO -- Finish commenting
    pass


def findCommand():
    ''' Determine the file size and apply the proper coloring
        Arguments:
            fsize:      An Integer with file size
        Return:         A string with file size color coded
        '''
    # TODO -- Finish commenting
    # TODO -- Add path variable
    pass
  
if __name__ == '__main__':
    pass
