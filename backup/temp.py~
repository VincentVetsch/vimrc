#!/usr/bin/env python
"""
29.07.2010 03:06:16 PDT    temp.py
Project Description:  Temperature pipe-menu
Version: 0.3

Author:    Vincent Vetsch
Email:     vincent.vetsch@gmail.com

Notes:
Usage:
Put an entry in your ~/.config/openbox/menu.xml like this:
<menu id="temps" label="temperatures" execute="~/Documents/Development/temp.py" />
And inside <menu id="root-menu" label="openbox">, add this somewhere
(wherever you want it on your menu)
<menu id="temps" />

Get the staton identifier from
http://www.nws.noaa.gov/tg/siteloc.shtml 
and append it to this script
example: 
<menu id="temps" label="temperatures" execute="~/Documents/Development/temp.py cyul" />
where cyul is the station.
"""

import pymetar, sys, urllib2
from commands import *
from socket import *

server = "127.0.0.1"
port = 7634
hd_max = 105
hd_temp = []

def shutdown():
    """ Will ask for root password and perform a halt
    Arguments:  None
    Returns:    None
    """

    """TODO:  Add code to shutdown the system
    17.08.2010 12:48:10 CDT
    Vincent Vetsch
    """

def auto_shutdown(difference):
    """ Shuts down the system if the temperature is near maximum
    
    Arguments:
    difference:     The difference between max and current temperatures
    Returns:        0 if difference is greater than 25.
                    1 if difference is less than 25
    """
    if difference > 25:
        return 0
    else:
        return 1
def make_cpu_entry(difference, temperature, cpu_number):
    """This function determines which icon to use for the menu entry
    
    Arguments:
        difference:     Is the difference between the current temp and the
                        Max Temp.
        temperature:    Is the current CPU Temperature
        cpu_number:     Is the current CPU
    Returns:            A formatted menu entry
    """
    if difference < 1:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp6.svg:22x22%\" \" \" Nop'
    elif difference < 20:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp5.svg:22x22%\" \" \" Nop'
    elif difference < 40:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp4.svg:22x22%\" \" \" Nop'
    elif difference < 60:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp3.svg:22x22%\" \" \" Nop'
    elif difference < 80:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp2.svg:22x22%\" \" \" Nop'
    elif difference < 100:
        print '+ \"CPU ' + str(cpu_number) + ': ' + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%CPU_Temp1.svg:22x22%\" \" \" Nop'
    else:
        print 'Not'
def make_disk_entry(difference, temperature, device):
    """This function determines which icon to use for the menu entry
    
    Arguments:
        difference:     Is the difference between the current temp and the
                        Max Temp.
        temperature:    Is the current device temperature
        device:         Is the current device
    Returns:            A formatted menu entry
    """
    if difference < 1:
        print '+ \"' + str(device) +  str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp6.svg:22x22%\" \" \" Nop'
    elif difference < 20:
        print '+ \"' + str(device) + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp5.svg:22x22%\" \" \" Nop'
    elif difference < 40:
        print '+ \"' + str(device) + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp4.svg:22x22%\" \" \" Nop'
    elif difference < 60:
        print '+ \"' + str(device) + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp3.svg:22x22%\" \" \" Nop'
    elif difference < 80:
        print '+ \"' + str(device) + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp2.svg:22x22%\" \" \" Nop'
    elif difference < 100:
        print '+ \"' + str(device) + str(temperature) + 'C / ' + str(convert_c_to_f(int(temperature))) + 'F%HD_Temp1.svg:22x22%\" \" \" Nop'
    else:
        print 'Not'
def convert_c_to_f(temperature):
    """Converts C to F
    
    Arguments:
    temperature:    Integer in degrees C
    
    Returns:        Integer in degrees F
    """
    return int(((9.0 / 5.0) * temperature) + 32)
def exterior_temp(station):
    """ Gets the current exterior temperature
    
    Arguments:
    station:        
    
    Returns:        Temperature and location
    """
    try:
        rf = pymetar.ReportFetcher(station)
        rep = rf.FetchReport()
        rp = pymetar.ReportParser()
        pr = rp.ParseReport(rep)
    except urllib2.URLError:
        return "No Connection%weather-none-available.svg:22x22%"

    ext_temperature = pr.getTemperatureCelsius()
    ext_temperature = str(ext_temperature)
    ext_temperature = ext_temperature[:len(ext_temperature)-2]
    return ext_temperature

cpu1_temp = open("/sys/bus/platform/devices/coretemp.0/temp1_input", 'r')
cpu1_max = open("/sys/bus/platform/devices/coretemp.0/temp1_max", 'r')
cpu2_temp = open("/sys/bus/platform/devices/coretemp.1/temp1_input", 'r')
cpu2_max = open("/sys/bus/platform/devices/coretemp.1/temp1_max", 'r')
# Remove the newline character and convert the string into an integer.
cpu1_temp = str(int(cpu1_temp.read()) / 1000)
cpu1_max = str(int(cpu1_max.read()) / 1000)
cpu1_diff = int(cpu1_max) - int(cpu1_temp)
cpu2_temp = str(int(cpu2_temp.read()) / 1000)
cpu2_max = str(int(cpu2_max.read()) / 1000)
cpu2_diff = int(cpu2_max) - int(cpu2_temp)

# Check to see if the temp is to high
if auto_shutdown(cpu1_diff) or auto_shutdown(cpu2_diff) == 1:
    print "Shutdown Now"
else:
    print "CPUs are within Tolerance"

if len(sys.argv) > 1:
    station = sys.argv[1]
else:
    station = "cyul"
# get external temp
#print '+ \"External Temp: ' + exterior_temp(station) + '\" \" \" Nop'

# Get CPU temperatures
make_cpu_entry(cpu1_diff, cpu1_temp, 1)
make_cpu_entry(cpu2_diff, cpu2_temp, 2)

#Get Temp from hddtemp deamon
Sock = socket(AF_INET, SOCK_STREAM)
Sock.connect((server, port))
data = Sock.recv(1024).split("||")
if len(data) > 1:
    for i in data:
        t = i.split("|")
        if t[0] == '':
            del t[0]
            if auto_shutdown(hd_max - int(t[2])) == 1:
                print "Shutdown Now"
            else:
                print t[0] + " is within Tolerance"
            make_disk_entry((hd_max - int(t[2])), t[2], ("Device " + t[0] + ": "))
        else:
            if auto_shutdown(hd_max - int(t[2])) == 1:
                print "Shutdown Now"
            else:
                print t[0] + " is within Tolerance"
            make_disk_entry((hd_max - int(t[2])), t[2], ("Device " + t[0] + ": "))
else:
    print '+ \"No Data Available from: ' + server + '%HD_Temp_no_connect.svg:22x22%' + '\" \" \" Nop'
Sock.close()
