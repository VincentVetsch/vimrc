 "Modeline and Notes {
 "   vim: set foldmarker={,} foldlevel=0 spell:
 "
 "   This is my personal .vimrc, I don't recommend you copy it, just 
 "   use the "   pieces you want(and understand!).  When you copy a 
 "   .vimrc in its entirety, weird and unexpected things can happen.
 "
 "   If you find an obvious mistake hit me up at:
 "   http://robertmelton.com/contact (many forms of communication)
 " }
 
 " Basics {
     set nocompatible " explicitly get out of vi-compatible mode
     set noexrc " don't use local version of .(g)vimrc, .exrc
     "set background=dark " we plan to use a dark background
     set timeoutlen=500
     set cpoptions=aABceFsmq
     "             |||||||||
     "             ||||||||+-- When joining lines, leave the cursor 
     "             |||||||      between joined lines
     "             |||||||+-- When a new match is created (showmatch) 
     "             ||||||      pause for .5
     "             ||||||+-- Set buffer options when entering the 
     "             |||||      buffer
     "             |||||+-- :write command updates current file name
     "             ||||+-- Automatically add <CR> to the last line 
     "             |||      when using :@r
     "             |||+-- Searching continues at the end of the match 
     "             ||      at the cursor position
     "             ||+-- A backslash has no special meaning in mappings
     "             |+-- :write updates alternative file name
     "             +-- :read updates alternative file name
     syntax on " syntax highlighting on
 " }
 
 " General {
     filetype plugin indent on " load filetype plugins/indent settings
     set autochdir " always switch to the current file directory 
     set backspace=indent,eol,start " make backspace a more flexible
     set backup " make backup files
     set backupdir=~/.vim/backup " where to put backup files
     set clipboard+=unnamed " share windows clipboard
     set directory=~/.vim/tmp " directory to place swap files in
     set fileformats=unix,dos,mac " support all three, in this order
     set hidden " you can change buffers without saving
     " (XXX: #VIM/tpope warns the line below could break things)
     set iskeyword+=_,$,@,%,# " none of these are word dividers 
     set mouse=a " use mouse everywhere
     set noerrorbells " don't make noise
     set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
     "             | | | | | | | | |
     "             | | | | | | | | +-- "]" Insert and Replace
     "             | | | | | | | +-- "[" Insert and Replace
     "             | | | | | | +-- "~" Normal
     "             | | | | | +-- <Right> Normal and Visual
     "             | | | | +-- <Left> Normal and Visual
     "             | | | +-- "l" Normal and Visual (not recommended)
     "             | | +-- "h" Normal and Visual (not recommended)
     "             | +-- <Space> Normal and Visual
     "             +-- <BS> Normal and Visual
     set wildmenu " turn on command line completion wild style
     " ignore these list file extensions
     set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,
                     \*.jpg,*.gif,*.png
     set wildmode=list:longest " turn on wild mode huge list
     set cpoptions+=$
 " }
 "
 " Python {
    " Enable pylint checking every save
    let g:pymode_lint_write = 1

    " Set key 'R' for run python code
    "let g:pymode_run_key = 'R'

    " Load show documentation plugin
    let g:pymode_doc = 1

    " Key for show python documentation
    let g:pymode_doc_key = 'K'

    " Load run code plugin
    let g:pymode_run = 1

    " Key for run python code
    let g:pymode_run_key = '<leader>run'

    " Load pylint code plugin
    let g:pymode_lint = 1

    " Switch pylint, pyflakes, pep8, mccabe code-checkers
    " Can have multiply values "pep8,pyflakes,mcccabe"
    let g:pymode_lint_checker = "pyflakes,pep8,mccabe"

    " Skip errors and warnings
    " E.g. E501,W002, E2,W (Skip all Warnings and Errors startswith E2) and etc
    let g:pymode_lint_ignore = "E501"

    " Select errors and warnings
    " E.g. "E4,W"
    let g:pymode_lint_select = ""

    " Run linter on the fly
    let g:pymode_lint_onfly = 0

    " Pylint configuration file
    " If file not found use 'pylintrc' from python-mode plugin directory
    let g:pymode_lint_config = "$HOME/.pylintrc"

    " Check code every save
    let g:pymode_lint_write = 1

    " Auto open cwindow if errors be finded
    let g:pymode_lint_cwindow = 1

    " Show error message if cursor placed at the error line
    let g:pymode_lint_message = 1

    " Auto jump on first error
    let g:pymode_lint_jump = 0

    " Hold cursor in current window
    " when quickfix is open
    let g:pymode_lint_hold = 0

    " Place error signs
    let g:pymode_lint_signs = 1

    " Maximum allowed mccabe complexity
    let g:pymode_lint_mccabe_complexity = 8

    " Minimal height of pylint error window
    let g:pymode_lint_minheight = 3

    " Maximal height of pylint error window
    let g:pymode_lint_maxheight = 6"

    " Load rope plugin
    let g:pymode_rope = 1

    " Auto create and open ropeproject
    let g:pymode_rope_auto_project = 1

    " Enable autoimport
    let g:pymode_rope_enable_autoimport = 1

    " Auto generate global cache
    let g:pymode_rope_autoimport_generate = 1

    let g:pymode_rope_autoimport_underlineds = 0

    let g:pymode_rope_codeassist_maxfixes = 10

    let g:pymode_rope_sorted_completions = 1

    let g:pymode_rope_extended_complete = 1

    let g:pymode_rope_autoimport_modules = ["os","shutil","datetime"]

    let g:pymode_rope_confirm_saving = 1

    let g:pymode_rope_global_prefix = "<C-x>p"

    let g:pymode_rope_local_prefix = "<C-c>r"

    let g:pymode_rope_vim_completion = 1

    let g:pymode_rope_guess_project = 1

    let g:pymode_rope_goto_def_newwin = ""

    let g:pymode_rope_always_show_complete_menu = 0

    " Enable python folding
    let g:pymode_folding = 1

    " Enable python objects and motion
    let g:pymode_motion = 1

    " Auto fix vim python paths if virtualenv enabled
    let g:pymode_virtualenv = 1

    " Additional python paths
    let g:pymode_paths = []

    " Load breakpoints plugin
    let g:pymode_breakpoint = 1

    " Key for set/unset breakpoint
    let g:pymode_breakpoint_key = '<leader>b'

    " Autoremove unused whitespaces
    let g:pymode_utils_whitespaces = 1

    " Set default pymode python indent options
    let g:pymode_options_indent = 1

    " Set default pymode python other options
    let g:pymode_options_other = 1

    " Enable pymode's custom syntax highlighting
    let g:pymode_syntax = 1

    " Enable all python highlightings
    let g:pymode_syntax_all = 1

    " Highlight "print" as function
    let g:pymode_syntax_print_as_function = 0

    " Highlight indentation errors
    let g:pymode_syntax_indent_errors = g:pymode_syntax_all

    " Highlight trailing spaces
    let g:pymode_syntax_space_errors = g:pymode_syntax_all

    " Highlight string formatting
    let g:pymode_syntax_string_formatting = g:pymode_syntax_all

    " Highlight str.format syntax
    let g:pymode_syntax_string_format = g:pymode_syntax_all

    " Highlight string.Template syntax
    let g:pymode_syntax_string_templates = g:pymode_syntax_all

    " Highlight doc-tests
    let g:pymode_syntax_doctests = g:pymode_syntax_all

    " Highlight builtin objects (__doc__, self, etc)
    let g:pymode_syntax_builtin_objs = g:pymode_syntax_all

    " Highlight builtin functions
    let g:pymode_syntax_builtin_funcs = g:pymode_syntax_all

    " Highlight exceptions
    let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all

    " For fast machines
    let g:pymode_syntax_slow_sync = 0
  "}
 
 "" Vim UI {
 "    set cursorcolumn " highlight the current column
 "    set cursorline " highlight current line
     set incsearch " BUT do highlight as you type you 
                    " search phrase
     set laststatus=2 " always show the status line
     set lazyredraw " do not redraw while running macros
     set linespace=0 " don't insert any extra pixel lines 
                      " betweens rows
     set list " we do what to show tabs, to ensure we get them 
               " out of my files
     set listchars=tab:>-,trail:- " show tabs and trailing 
     set matchtime=5 " how many tenths of a second to blink 
                      " matching brackets for
     set nohlsearch " do not highlight searched for phrases
     set nostartofline " leave my cursor where it was
     set novisualbell " don't blink
     set number " turn on line numbers
     set numberwidth=5 " We are good up to 99999 lines
     set report=0 " tell us when anything is changed via :...
     set ruler " Always show current positions along the bottom
     set scrolloff=10 " Keep 10 lines (top/bottom) for scope
     set shortmess=aOstT " shortens messages to avoid 
                          " 'press a key' prompt
     set showcmd " show the command being typed
     set showmatch " show matching brackets
     set sidescrolloff=10 " Keep 5 lines at the size
     set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
     "              | | | | |  |   |      |  |     |    |
     "              | | | | |  |   |      |  |     |    + current 
     "              | | | | |  |   |      |  |     |       column
     "              | | | | |  |   |      |  |     +-- current line
     "              | | | | |  |   |      |  +-- current % into file
     "              | | | | |  |   |      +-- current syntax in 
     "              | | | | |  |   |          square brackets
     "              | | | | |  |   +-- current fileformat
     "              | | | | |  +-- number of lines
     "              | | | | +-- preview flag in square brackets
     "              | | | +-- help flag in square brackets
     "              | | +-- readonly flag in square brackets
     "              | +-- rodified flag in square brackets
     "              +-- full path to file in the buffer
 " }
 
 " Text Formatting/Layout {"{"}
     set completeopt= " don't use a pop up menu for completions
     set expandtab " no real tabs please!
     set formatoptions=rq " Automatically insert comment leader on return, 
                           " and let gq format comments
     set ignorecase " case insensitive by default
     set infercase " case inferred by default
     set nowrap " do not wrap line
     set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
     set smartcase " if there are caps, go case-sensitive
     set shiftwidth=4 " auto-indent amount when using cindent, 
                       " >>, << and stuff like that
     set softtabstop=4 " when hitting tab or backspace, how many spaces 
                        "should a tab be (see expandtab)
     set tabstop=8 " real tabs should be 8, and they will show with 
                    " set list on
 " }
 
 " Folding {
     set foldenable " Turn on folding
     set foldmarker={,} " Fold C style code (only use this as default 
                         " if you use a high foldlevel)
     set foldmethod=marker " Fold on the marker
     set foldlevel=100 " Don't autofold anything (but I can still 
                       " fold manually)
     set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
                                                       " open folds 
     function SimpleFoldText() " {
         return getline(v:foldstart).' '
     endfunction " }
     set foldtext=SimpleFoldText() " Custom fold text function 
                                    " (cleaner than default)
 " }
 
 " Plugin Settings {
    let b:match_ignorecase = 1 " case is stupid
     let perl_extended_vars=1 " highlight advanced perl vars 

     " TagList Settings {
         let Tlist_Auto_Open=0 " let the tag list open automagically
         let Tlist_Compact_Format = 1 " show small menu
         let Tlist_Ctags_Cmd = 'ctags' " location of ctags
         let Tlist_Enable_Fold_Column = 0 " do show folding tree
         let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill 
                                         " yourself
         let Tlist_File_Fold_Auto_Close = 0 " fold closed other trees
         let Tlist_Sort_Type = "name" " order by 
         let Tlist_Use_Right_Window = 1 " split to the right side
                                         " of the screen
         let Tlist_WinWidth = 40 " 40 cols wide, so i can (almost always)
                                  " read my functions
         " Language Specifics {
             " just functions and classes please
             let tlist_aspjscript_settings = 'asp;f:function;c:class' 
             " just functions and subs please
             let tlist_aspvbs_settings = 'asp;f:function;s:sub' 
             " don't show variables in freaking php
             let tlist_php_settings = 'php;c:class;d:constant;f:function' 
             " just functions and classes please
             let tlist_vb_settings = 'asp;f:function;c:class' 
         " }
     " }
 " }
 
 " Mappings {
map <F12> ggVGg?

" space / shift-space scroll in normal mode
noremap <S-space> <C-b>
noremap <space> <C-f>

" Make Arrow Keys Useful Again {
"         map <down> <ESC>:bn<RETURN>
"         map <left> <ESC>:NERDTreeToggle<RETURN>
"         map <right> <ESC>:Tlist<RETURN>
"         map <up> <ESC>:bp<RETURN>
     " }
 " }

 " Autocommands {
     " Ruby {
         " ruby standard 2 spaces, always
         au BufRead,BufNewFile *.rb,*.rhtml set shiftwidth=2 
         au BufRead,BufNewFile *.rb,*.rhtml set softtabstop=2 
     " }
     " Notes {
         " I consider .notes files special, and handle them differently, I
         " should probably put this in another file
         au BufRead,BufNewFile *.notes set foldlevel=2
         au BufRead,BufNewFile *.notes set foldmethod=indent
         au BufRead,BufNewFile *.notes set foldtext=foldtext()
         au BufRead,BufNewFile *.notes set listchars=tab:\ \ 
         au BufRead,BufNewFile *.notes set noexpandtab
         au BufRead,BufNewFile *.notes set shiftwidth=8
         au BufRead,BufNewFile *.notes set softtabstop=8
         au BufRead,BufNewFile *.notes set tabstop=8
         au BufRead,BufNewFile *.notes set syntax=notes
         au BufRead,BufNewFile *.notes set nocursorcolumn
         au BufRead,BufNewFile *.notes set nocursorline
         au BufRead,BufNewFile *.notes set guifont=Consolas:h12
         au BufRead,BufNewFile *.notes set spell
     " }
     au BufNewFile,BufRead *.ahk setf ahk 
 " }
 
  " GUI Settings {
 if has("gui_running")
     " Basics {
         colorscheme metacosm " my color scheme (only works in GUI)
         set columns=180 " perfect size for me
         set guifont=Consolas:h10 " My favorite font
         set guioptions=ce 
         "              ||
         "              |+-- use simple dialogs rather than pop-ups
         "              +  use GUI tabs, not console style tabs
         set lines=55 " perfect size for me
         set mousehide " hide the mouse cursor when typing
     " }
 
     " Font Switching Binds {
         map <F8> <ESC>:set guifont=Consolas:h8<CR>
         map <F9> <ESC>:set guifont=Consolas:h10<CR>
         map <F10> <ESC>:set guifont=Consolas:h12<CR>
         map <F11> <ESC>:set guifont=Consolas:h16<CR>
         map <F12> <ESC>:set guifont=Consolas:h20<CR>
     " }
 endif
" }" GUI Settings {
 if has("gui_running")
     " Basics {
         colorscheme metacosm " my color scheme (only works in GUI)
         set columns=180 " perfect size for me
         set guifont=Consolas:h10 " My favorite font
         set guioptions=ce 
         "              ||
         "              |+-- use simple dialogs rather than pop-ups
         "              +  use GUI tabs, not console style tabs
         set lines=55 " perfect size for me
         set mousehide " hide the mouse cursor when typing
     " }
 
     " Font Switching Binds {
         map <F8> <ESC>:set guifont=Consolas:h8<CR>
         map <F9> <ESC>:set guifont=Consolas:h10<CR>
         map <F10> <ESC>:set guifont=Consolas:h12<CR>
         map <F11> <ESC>:set guifont=Consolas:h16<CR>
         map <F12> <ESC>:set guifont=Consolas:h20<CR>
     " }
 endif
" }
